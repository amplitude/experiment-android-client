plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'org.jetbrains.dokka'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.0'
    id 'org.jlleitschuh.gradle.ktlint'
}
ext {
    PUBLISH_NAME = 'Experiment Android SDK'
    PUBLISH_DESCRIPTION = 'Amplitude Experiment client-side SDK for Android'
    PUBLISH_GROUP_ID = 'com.amplitude'
    PUBLISH_VERSION = '1.12.2'
    PUBLISH_ARTIFACT_ID = 'experiment-android-client'
}

apply from: "${rootDir}/gradle/publish-module.gradle"

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 33
        versionName PUBLISH_VERSION
        buildConfigField "String", "VERSION_NAME", "\"$PUBLISH_VERSION\""
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    namespace 'com.amplitude.experiment'
}

dependencies {
    implementation 'com.amplitude:analytics-connector:1.0.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.amplitude:android-sdk:2.26.1'
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-core:1.3.3")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.3")

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.json:json:20240303'
    testImplementation project(path: ':sdk')
    testImplementation "io.mockk:mockk:1.12.0"
}

task docs(dependsOn: dokkaHtml) {
    dokkaHtml {
        outputDirectory.set(new File(rootDir, "docs"))
        moduleName.set("experiment-android-client")
        dokkaSourceSets {
            named("main") {
                includeNonPublic.set(false)
                skipEmptyPackages.set(true)
                skipDeprecated.set(true)
                reportUndocumented.set(true)
            }
        }
    }
}


